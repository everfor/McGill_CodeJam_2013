{
  "name": "alike",
  "version": "1.2.0",
  "description": "A simple kNN library for Machine Learning, comparing JSON objects using Euclidean distances, returning top k similar objects -- supports normalization, weights, key and filter parameters",
  "main": "lib/main.js",
  "devDependencies": {
    "mocha": "1.8.1",
    "should": "1.2.1",
    "coffee-script": "~1.6.3",
    "benchmark": "1.0.x",
    "node-uuid": "1.4.x",
    "cli-table": "~0.2.0"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/*.js"
  },
  "author": {
    "name": "mck-",
    "email": "kuomarc2@gmail.com"
  },
  "keywords": [
    "knn",
    "Machine Learning",
    "recommender system",
    "euclidean distances",
    "similarity",
    "object comparison"
  ],
  "readmeFilename": "README.md",
  "homepage": "https://github.com/axiomzen/Alike",
  "repository": {
    "type": "git",
    "url": "https://github.com/axiomzen/Alike"
  },
  "bugs": {
    "url": "https://github.com/axiomzen/Alike/issues"
  },
  "license": "LGPL",
  "dependencies": {
    "stable": "~0.1.3"
  },
  "readme": "Alike\n=============\n[![Build Status](https://travis-ci.org/axiomzen/Alike.png?branch=master)](https://travis-ci.org/axiomzen/Alike)\n\nA simple-but-useful kNN library for NodeJS, comparing JSON Objects using Euclidean distances, returning top k closest objects.\n\nSupports Normalized Weighted Euclidean distances. Normalize attributes by Standard Deviation. See [here](http://www.econ.upf.edu/~michael/stanford/maeb4.pdf).\n\nFeatures `key` and `filter` attributes to do the data assembly for you, Lisp style!\n\n## k-Nearest Neighbour function\n```\nsubject:  vantage point object - will consider each attribute present in this object as a feature\nobjects:  array of objects that should all have at least the attributes of subject\noptions:\n    - k: (default = unlimited) specifies how many objects to return\n    - standardize: (default = false) if true, will apply standardization across all attributes using stdvs - set this to true if your attributes do not have the same scale\n    - weights: (default = {}) a hash describing the weights of each attribute\n    - key: (default = none) a key function to map over objects, to be used if the subject attributes are nested within key\n        e.g. if subject is {a:0} and objects are [{x: {a: 0}}, {x: {a: 2}}], then provide key: function(o) {return o.x}\n    - filter: (default = none) a filter function that returns true for items to be considered\n        e.g. to only consider objects with non-negative a: function(o) {return o.a >= 0})\n```\n## Example usage\n\nGiven John Foo's taste for movies:\n\n<table>\n  <thead>\n    <th>Attributes</th>\n    <th>Value</th>\n    <th>Weight</th>\n  </thead>\n  <tr>\n    <td>explosions</td><td>8</td><td>10%</td>\n  </tr>\n  <tr>\n    <td>romance</td><td>3</td><td>30%</td>\n  </tr>\n  <tr>\n    <td>length</td><td>6</td><td>5%</td>\n  </tr>\n  <tr>\n    <td>humor</td><td>5</td><td>5%</td>\n  </tr>\n  <tr>\n    <td>pigeons</td><td>10</td><td>50%</td>\n  </tr>\n</table>\n\nJohn Foo would like to rent a movie tonight that most closely matches his movie tastes. He collected a DB of movies with numerical values ranging from 1 to 10 for each of the 5 attributes listed above (don't ask how).\n\nJohn Foo loves his pigeons. It is the most important attribute to him, hence carries 50% of the weight. He does not like romance and wants to make sure that he avoids sappy movies. Even though he likes mid-length movies with explosions and semi-funny movies, he doesn't care as much, as long as the movie features peaceful pigeons.\n\nPerfect case for Alike!\n\n### Getting started\n\nTo install and add it to your `package.json`\n\n```\n$ npm install alike --save\n```\n\nNow you can load up the module and use it like so:\n\n```\nknn = require('alike');\n\noptions = {\n  k: 10,\n  weights: {\n    explosions: 0.1,\n    romance: 0.3,\n    length: 0.05,\n    humour: 0.05,\n    pigeons: 0.5\n  }\n}\n\nmovieTaste = {\n  explosions: 8,\n  romance: 3,\n  length: 5,\n  humour: 6,\n  pigeons: 10\n}\n\nknn(movieTaste, movies, options)\n```\n\nWhere `movies` is an array of objects that have at least those 5 attributes. Returns the top 10 movies from the array. Enjoy! :)\n\n## Development\n\nAlike is written in CoffeeScript in the `coffee/` folder. You may use `make coffee` to compile and watch for changes. Unit tests are in the `coffee/test/` folder. You can run the tests with `npm test` or if you are developing, you may use `make watch-test` to watch while you TDD. :)\n\n## Benchmarks\n\nRun it with `coffee benchmark/` takes about 1m on a Macbook Air.\n\nThe benchmarks are designed to reflect realistically sized sets of data. They don't ship with the `npm` package to keep things light.\n\n## License\n\nAlike is licensed under the terms of the [GNU Lesser General Public License](http://www.gnu.org/licenses/lgpl.html), known as the LGPL.\n",
  "_id": "alike@1.2.0",
  "dist": {
    "shasum": "c25c725d889dddca8140cdd92a2e65280c968fe6"
  },
  "_from": "alike@",
  "_resolved": "https://registry.npmjs.org/alike/-/alike-1.2.0.tgz"
}
